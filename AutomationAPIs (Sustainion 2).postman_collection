{
	"info": {
		"_postman_id": "66ed4464-0933-4c33-ae98-0810fcf01b5d",
		"name": "Automation APIs (Sustainion 2)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26515196",
		"_collection_link": "https://winter-capsule-961230.postman.co/workspace/Sustainion-2~908ebb80-88a7-4100-bf8d-14ef0a41f67c/collection/26515196-66ed4464-0933-4c33-ae98-0810fcf01b5d?action=share&creator=26515196&source=collection_link"
	},
	"item": [
		{
			"name": "Electricity consumptions ",
			"item": [
				{
					"name": "Create Electricity consumptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCost = Math.floor(Math.random() * 100) +1.1 ;\r",
									"pm.globals.set(\"cost\",randomCost); \r",
									"\r",
									"const consumption = Math.floor(Math.random() * 1000)+1.3; \r",
									"pm.globals.set(\"consumption\",consumption); \r",
									"\r",
									"const moment = require(\"moment\");\r",
									"var startdate = moment().add(\"days\", _.random(-500,-3000));\r",
									"pm.globals.set(\"start_date\", startdate.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"const moment1 = require(\"moment\"); \r",
									"var enddate = moment1().add(\"days\", _.random(-1,3000));\r",
									"pm.globals.set(\"end_date\", enddate.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"//const electricity_unit_id  = Math.floor(Math.random() * 3);\r",
									"//pm.globals.set(\"electricity_unit_id\",electricity_unit_id);\r",
									"\r",
									"var electricity_unit_id = null;\r",
									"\r",
									"do {\r",
									"  electricity_unit_id = Math.floor(Math.random() * 53) + 1;\r",
									"} while (electricity_unit_id !== 1 && electricity_unit_id !== 2 && electricity_unit_id !== 53);\r",
									"\r",
									"pm.globals.set(\"electricity_unit_id\", electricity_unit_id.toString());\r",
									"\r",
									"const currency_id  = Math.floor(Math.random() * 21)+1;\r",
									"pm.globals.set(\"currency_id\",currency_id); \r",
									"\r",
									"//const provider_id  = Math.floor(Math.random() * 26)+1;\r",
									"//pm.globals.set(\"provider_id\",provider_id);  \r",
									"\r",
									"const remarks = Math.random().toString(36).substring(2, 12);\r",
									"//console.log(\"random\", r);\r",
									"pm.globals.set(\"remarks\",remarks); \r",
									"\r",
									"var ghg_protocol_scope = null;\r",
									"\r",
									"do {\r",
									"  ghg_protocol_scope = Math.floor(Math.random() *3) + 1;\r",
									"} while (ghg_protocol_scope !== 1 && ghg_protocol_scope !== 2 && ghg_protocol_scope !== 3);\r",
									"\r",
									"pm.globals.set(\"ghg_protocol_scope\", ghg_protocol_scope.toString()); \r",
									"\r",
									"var provider_id = null;\r",
									"\r",
									"do {\r",
									"  provider_id = Math.floor(Math.random() *6) + 1;\r",
									"} while (provider_id !== 1 && provider_id !== 2 && provider_id!== 6);\r",
									"\r",
									"pm.globals.set(\"provider_id\",provider_id.toString());\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 33,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"consumer_id\": 705,\r\n            \"start_date\": \"2016-01-24\",\r\n          \"end_date\": \"2024-06-15\",\r\n            \"ghg_protocol_scope\": {{ghg_protocol_scope}},\r\n            \"consumption\": {{consumption}},\r\n            \"electricity_unit_id\": {{electricity_unit_id}},\r\n            \"cost\": {{cost}},\r\n            \"currency_id\": {{currency_id}},\r\n            \"remarks\": \"{{remarks}}\",\r\n            \"provider_id\": {{provider_id}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Electricity_consumptions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"Electricity_id\", data.data[0]['id']); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/1/electricity_consumptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"1",
								"electricity_consumptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Electricity consumptions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCost = Math.floor(Math.random() * 100) +1.1 ;\r",
									"pm.globals.set(\"cost\",randomCost); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n   \"data\":\r\n        [{\r\n         \"id\" :{{Electricity_id}},\r\n        \"consumer_id\" : 705,\r\n          \"start_date\" : \"2016-01-24\",\r\n          \"end_date\" : \"2024-06-15\",\r\n          \"ghg_protocol_scope\": {{ghg_protocol_scope}},\r\n          \"consumption\" : {{consumption}},\r\n          \"electricity_unit_id\" : {{electricity_unit_id}},\r\n          \"cost\" : {{cost}},\r\n          \"currency_id\" : {{currency_id}},\r\n          \"remarks\" : \"{{remarks}}\",\r\n          \"provider_id\" :{{provider_id}}\r\n        }\r\n         \r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit?form_id=33&subscriber_id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "33"
								},
								{
									"key": "subscriber_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "antioxident_consumptions",
			"item": [
				{
					"name": "Create antioxident_consumptions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var weight_unit_id = null;\r",
									"\r",
									"do {\r",
									"  weight_unit_id = Math.floor(Math.random() * 69) + 1;\r",
									"} while (weight_unit_id !== 6 && weight_unit_id !== 7 && weight_unit_id !== 8,weight_unit_id !== 9 && weight_unit_id !== 10 && weight_unit_id !== 11,weight_unit_id !== 58 && weight_unit_id !== 65 && weight_unit_id !== 69);\r",
									"\r",
									"pm.globals.set(\"weight_unit_id\", weight_unit_id.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"form_id\" :2,\r\n\"subscriber_id\" : 1,\r\n\"data\":[\r\n{\r\n\"consumer_id\" : 1,\r\n\"start_date\" : \"2021-03-27\",\r\n\"end_date\" : \"2023-03-28\",\r\n\"currency_id\" : 10,\r\n\"cost\" :{{cost}},\r\n\"consumption\" : {{consumption}},\r\n\"weight_unit_id\" : {{weight_unit_id}},\r\n\"remarks\" : \"{{remarks}}\"\r\n}\r\n\r\n]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List antioxident_consumptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"antioxidants_id\", data.data[0]['id']); \r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/1/antioxidants_consumptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"1",
								"antioxidants_consumptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update antioxident_consumptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"data\":[\r\n        {\r\n          \"id\":{{antioxidants_id}},\r\n         \"consumer_id\" : 1,\r\n         \"start_date\" : \"2023-03-27\",\r\n        \"end_date\" : \"2023-03-28\",\r\n        \"currency_id\" : {{currency_id}},\r\n         \"cost\" : {{cost}},\r\n         \"consumption\" : {{consumption}},\r\n          \"weight_unit_id\" : {{weight_unit_id}},\r\n          \"remarks\" : \"{{remarks}}\"\r\n        }\r\n    ]\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit?form_id=2&subscriber_id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "2"
								},
								{
									"key": "subscriber_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gas consumptions",
			"item": [
				{
					"name": "create gas consumptions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var gas_unit_id = null;\r",
									"do {\r",
									"\r",
									"  gas_unit_id = Math.floor(Math.random() * 29) + 28;\r",
									"\r",
									"} while (gas_unit_id !== 28 && gas_unit_id !== 29);\r",
									"\r",
									"\r",
									"pm.globals.set(\"gas_unit_id\",gas_unit_id.toString());\r",
									"\r",
									"var gas_type_id = null;\r",
									"do {\r",
									"\r",
									" gas_type_id = Math.floor(Math.random() * 3) + 1;\r",
									"\r",
									"} while (gas_type_id !== 1 && gas_type_id!== 2 && gas_type_id !== 3 );\r",
									"\r",
									"\r",
									"pm.globals.set(\"gas_type_id\", gas_type_id.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\" :3,\r\n    \"subscriber_id\" : 1,\r\n    \"data\":[\r\n        {\"consumer_id\" : 535,\r\n          \"start_date\" : \"2017-05-01\",\r\n          \"end_date\" : \"2023-08-30\",\r\n          \"ghg_protocol_scope\": {{ghg_protocol_scope}},\r\n          \"consumption\" : {{consumption}},\r\n          \"gas_unit_id\" : {{gas_unit_id}},\r\n          \"cost\" : {{cost}},\r\n          \"currency_id\" : {{currency_id}},\r\n          \"remarks\" : \"Testing\",\r\n          \"gas_type_id\" : {{gas_type_id}}\r\n         \r\n        }\r\n        \r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List gas consumptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"gas consumptions_id\", data.data[0]['id']); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/1/gas_consumptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"1",
								"gas_consumptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update gas consumptions",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\" :3,\r\n    \"subscriber_id\" : 1,\r\n    \"data\":[\r\n        {\"id\" : {{gas consumptions_id}},\r\n        \"consumer_id\" : 535,\r\n          \"start_date\" : \"2016-05-01\",\r\n          \"end_date\" : \"2023-08-30\",\r\n          \"ghg_protocol_scope\": {{ghg_protocol_scope}},\r\n          \"consumption\" : {{consumption}},\r\n          \"gas_unit_id\" : {{gas_unit_id}},\r\n          \"cost\" : {{cost}},\r\n          \"currency_id\" : {{currency_id}},\r\n          \"remarks\" : \"Testing\",\r\n          \"gas_type_id\" : {{gas_type_id}}\r\n         \r\n        }\r\n        \r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit?form_id=3&subscriber_id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "3"
								},
								{
									"key": "subscriber_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Steam consumptions",
			"item": [
				{
					"name": "Create steam consumptions",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"form_id\" :9,\r\n\"subscriber_id\" : 1,\r\n\"data\":[\r\n{\"consumer_id\" : 714,\r\n\"start_date\" : \"2012-03-27\",\r\n\"end_date\" : \"2014-03-28\",\r\n\"ghg_protocol_scope\": {{ghg_protocol_scope}},\r\n\"currency_id\" : 10,\r\n\"cost\" :{{cost}},\r\n\"consumption\" : {{consumption}},\r\n\"energy_unit_id\" : 17,\r\n\"remarks\" : \"Testing\"\r\n}\r\n]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List steam_consumptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"steam consumptions_id\", data.data[0]['id']); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/1/steam_consumptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"1",
								"steam_consumptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update steam consumptions",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":[\r\n        {\"id\" : {{steam consumptions_id}},\r\n        \"consumer_id\" : 714,\r\n          \"start_date\" : \"2014-03-27\",\r\n          \"end_date\" : \"2014-03-28\",\r\n          \"ghg_protocol_scope\": {{ghg_protocol_scope}},\r\n            \"currency_id\" : 10,\r\n            \"cost\" : {{cost}},\r\n          \"consumption\" : {{consumption}},\r\n          \"energy_unit_id\" : 17,\r\n          \"remarks\" : \"Test\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit?form_id=9&subscriber_id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "9"
								},
								{
									"key": "subscriber_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Detergent Consumptions",
			"item": [
				{
					"name": "Create Detergent Consumptions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var weight_unit_id = null;\r",
									"\r",
									"do {\r",
									"\r",
									" weight_unit_id = Math.floor(Math.random() * 69) + 6;\r",
									"\r",
									"} while (weight_unit_id !== 6 && weight_unit_id !== 7 && weight_unit_id !== 8 && weight_unit_id !== 9 && weight_unit_id !== 10 && weight_unit_id !== 11 && \r",
									"weight_unit_id !== 58 && weight_unit_id !== 65 );\r",
									"\r",
									"pm.globals.set(\"weight_unit_id\", weight_unit_id.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"form_id\" :5,\r\n\"subscriber_id\" : 1,\r\n\"data\":[\r\n{\r\n    \"consumer_id\" : 1,\r\n\"start_date\" : \"2023-03-27\",\r\n\"end_date\" : \"2023-03-28\",\r\n\"currency_id\" : {{currency_id}},\r\n\"cost\" : {{cost}},\r\n\"consumption\" : {{consumption}},\r\n\"weight_unit_id\" : {{weight_unit_id}},\r\n\"remarks\" : \"Testing\"\r\n}\r\n]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Detergent Consumptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"detergent_consumptions_id\", data.data[0]['id']); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/1/detergent_consumptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"1",
								"detergent_consumptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Detergrent Consumptions",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"form_id\" :5,\r\n\"subscriber_id\" : 1,\r\n\"data\":[\r\n{\r\n\"id\" : {{detergent_consumptions_id}},\r\n\"consumer_id\" : 1,\r\n\"start_date\" : \"2023-03-27\",\r\n\"end_date\" : \"2023-03-28\",\r\n\"currency_id\" : {{currency_id}},\r\n\"cost\" : {{cost}},\r\n\"consumption\" : {{consumption}},\r\n\"weight_unit_id\" : {{weight_unit_id}},\r\n\"remarks\" : \"Testing\"\r\n}\r\n]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit?form_id=5&subscriber_id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "5"
								},
								{
									"key": "subscriber_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Refrigerant Leakage",
			"item": [
				{
					"name": "Create Refrigerant Leakage",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\" :11,\r\n    \"subscriber_id\" : 1,\r\n    \"data\":[\r\n        {\"consumer_id\" : {{parent_location_id}},\r\n          \"start_date\" : \"2016-12-01\",\r\n          \"end_date\" : \"2020-12-31\",\r\n          \"ghg_protocol_scope\": {{ghg_protocol_scope}},\r\n            \"currency_id\" : {{currency_id}},\r\n            \"cost\" : {{cost}},\r\n          \"consumption\" : {{consumption}},\r\n          \"weight_unit_id\" : 6,\r\n          \"refrigerant_type_id\" : 19 ,\r\n          \"remarks\" : \"Test\"\r\n        }\r\n        \r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Refrigerant Leakage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"refrigerant_leakage_id\", data.data[0]['id']); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/1/refrigerant_consumptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"1",
								"refrigerant_consumptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Refrigerant Leakage",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": [\r\n    {\r\n      \"id\": {{refrigerant_leakage_id}},\r\n      \"consumer_id\": 619,\r\n      \"start_date\": \"2016-12-01\",\r\n      \"end_date\": \"2016-12-31\",\r\n      \"ghg_protocol_scope\": {{ghg_protocol_scope}},\r\n      \"currency_id\": {{currency_id}},\r\n      \"cost\": {{cost}},\r\n      \"consumption\": {{consumption}},\r\n      \"weight_unit_id\": {{weight_unit_id}},\r\n      \"refrigerant_type_id\": 19,\r\n      \"remarks\": \"Test\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit?form_id=11&subscriber_id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "11"
								},
								{
									"key": "subscriber_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Weighted fuel consumption",
			"item": [
				{
					"name": "Create Weighted fuel consumption",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var fuel_type_id = null;\r",
									"do {\r",
									"\r",
									" fuel_type_id = Math.floor(Math.random() * 9) + 1;\r",
									"\r",
									"} while (fuel_type_id !== 2 && fuel_type_id!== 9 );\r",
									"\r",
									"\r",
									"pm.globals.set(\"fuel_type_id\", fuel_type_id.toString()); \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"form_id\" :49,\r\n\"subscriber_id\" : 1,\r\n\"data\":[\r\n{\"consumer_id\" : 447,\r\n\"start_date\" : \"2014-03-27\",\r\n\"end_date\" : \"2023-03-28\",\r\n\"ghg_protocol_scope\": {{ghg_protocol_scope}},\r\n\"currency_id\" : {{currency_id}},\r\n\"cost\" : {{cost}},\r\n\"consumption\" : {{consumption}},\r\n\"weight_unit_id\" : 9,\r\n\"fuel_type_id\" : {{fuel_type_id}},\r\n\"type\" : \"test\",\r\n\"remarks\" : \"Test\"\r\n}\r\n\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List weighted fuel consumption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"weighted_fuel_consumptions_id\", data.data[1]['id']); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/1/weighted_fuel_consumptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"1",
								"weighted_fuel_consumptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "update weighted fuel consumption",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": [\r\n    {\r\n      \"id\": {{weighted_fuel_consumptions_id}},\r\n      \"consumer_id\": 447,\r\n      \"start_date\": \"2014-01-01\",\r\n      \"end_date\": \"2014-03-31\",\r\n      \"ghg_protocol_scope\": {{ghg_protocol_scope}},\r\n      \"currency_id\": {{currency_id}},\r\n      \"cost\": {{cost}},\r\n      \"consumption\": {{consumption}},\r\n      \"weight_unit_id\": 9,\r\n      \"fuel_type_id\": {{fuel_type_id}},\r\n      \"type\": \"WeightedFuelConsumption\",\r\n      \"remarks\": \"Test\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit?form_id=49&subscriber_id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "49"
								},
								{
									"key": "subscriber_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Water recycled",
			"item": [
				{
					"name": "Create water recycled",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"consumption\", Math.floor(Math.random() * 10000) + 1);\r",
									"\r",
									"const volumeUnitIds = [3, 4, 5];\r",
									"const randomIndex = Math.floor(Math.random() * volumeUnitIds.length);\r",
									"const randomVolumeUnitId = volumeUnitIds[randomIndex];\r",
									"\r",
									"pm.globals.set(\"volumeUnitId\", randomVolumeUnitId);\r",
									"\r",
									"\r",
									"//pm.test(\"Remarks text value length is within expected range\", function() {\r",
									"    //var response = pm.response.json();\r",
									"    //pm.expect(response.remarks.length).to.be.within(1, 100);\r",
									"//});\r",
									"\r",
									"//pm.environment.set(\"remarks\", \"This is a test remark\");\r",
									"\r",
									"function generateRandomString(length) {\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"remarks\", generateRandomString(10));\r",
									"\r",
									"pm.environment.set(\"type\", \"WaterRecycled\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 39,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"consumer_id\": 1,\r\n            \"start_date\": \"2023-06-09\",\r\n            \"end_date\": \"2023-09-08\",\r\n            \"consumption\": {{consumption}},\r\n            \"volume_unit_id\": {{volumeUnitId}},\r\n            \"type\": \"{{type}}\",\r\n            \"remarks\": \"{{remarks}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List water recycled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"water_recycled_id\", data.data[0]['id']); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/1/water_recycled",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"1",
								"water_recycled"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update water recycled",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"form_id\" :39,\r\n\"subscriber_id\" : 1,\r\n\"data\":[\r\n{\"id\" : {{water_recycled_id}},\r\n\"consumer_id\" : 1,\r\n\"start_date\" : \"2023-03-27\",\r\n\"end_date\" : \"2023-03-28\",\r\n\"consumption\" : {{consumption}},\r\n\"volume_unit_id\" : {{volumeUnitId}},\r\n\"type\" : \"WaterRecycled\",\r\n\"remarks\" : \"Test\"\r\n}\r\n\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit?form_id=39&subscriber_id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "39"
								},
								{
									"key": "subscriber_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer safety records",
			"item": [
				{
					"name": "Create customer safety records",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nb_incidents = Math.floor(Math.random() * 10) + 1;\r",
									"pm.globals.set(\"nb_incidents\", nb_incidents);\r",
									"\r",
									"const nb_fatal = Math.floor(Math.random() * 10) + 1;\r",
									"pm.globals.set(\"nb_fatal\", nb_fatal);\r",
									"\r",
									"const nb_non_fatal = Math.floor(Math.random() * 5) + 1;\r",
									"pm.globals.set(\"nb_non_fatal\", nb_non_fatal);\r",
									"\r",
									"const customer_accident_type_id = Math.floor(Math.random() * 9) + 1;\r",
									"pm.globals.set(\"customer_accident_type_id\", customer_accident_type_id);\r",
									"\r",
									"\r",
									"pm.sendRequest('https://dev.sustainion.tech/api/admin/form-structure/fields/1/customer_safety_records', function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(err);\r",
									"    } else {\r",
									"        \r",
									"        var result  = res.json();\r",
									"totalrecords_of_location = result.columns[0].source.length;\r",
									"pm.globals.set(\"source.length\", \"source.length\");\r",
									"var randomNumber = Math.floor(Math.random() * totalrecords_of_location);\r",
									"var parent_location_id = result.columns[0].source[randomNumber].id;\r",
									"pm.globals.set('parent_location_id', parent_location_id);\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 7,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"consumer_id\": {{parent_location_id}},\r\n            \"start_date\": \"2017-01-23\",\r\n            \"end_date\": \"2017-04-23\",\r\n            \"customer_accident_type_id\": {{customer_accident_type_id}},\r\n            \"nb_incidents\": {{nb_incidents}},\r\n            \"nb_fatal\": {{nb_fatal}},\r\n            \"nb_non_fatal\": {{nb_non_fatal}},\r\n            \"remarks\": \"\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List customer safety records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"Customer safety records_id\", data.data[1]['id']); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/1/customer_safety_records",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"1",
								"customer_safety_records"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer safety records",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Customer safety records_id}},\r\n            \"consumer_id\": {{parent_location_id}} ,\r\n            \"start_date\": \"2017-01-23\",\r\n            \"end_date\": \"2017-03-23\",\r\n            \"customer_accident_type_id\": {{customer_accident_type_id}},\r\n            \"nb_incidents\": {{nb_incidents}},\r\n            \"nb_fatal\": {{nb_fatal}},\r\n            \"nb_non_fatal\": {{nb_non_fatal}},\r\n            \"remarks\": \"Test CSR\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit?subscriber_id=1&form_id=7",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "subscriber_id",
									"value": "1"
								},
								{
									"key": "form_id",
									"value": "7"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CSR & Environment",
			"item": [
				{
					"name": "List  CSR & Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"CSR Environment_id\", data.data[0]['id']); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/1/improvements",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"1",
								"improvements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CSR & Environment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//const improvement_category_id = [1, 2, 3];\r",
									"//const randomIndex = Math.floor(Math.random() * improvement_category_id.length);\r",
									"//const randomimprovement_category_id = improvement_category_id[randomIndex];\r",
									"\r",
									"function generateRandomString(length) {\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.globals.set(\"remarks\", generateRandomString(10));\r",
									"\r",
									"pm.variables.set(\"amount\", Math.floor(Math.random() * 10000) + 1);\r",
									"\r",
									"pm.variables.set(\"man_days\", Math.floor(Math.random() * 10000) + 1);\r",
									"\r",
									"const currency_id  = Math.floor(Math.random() * 21)+1;\r",
									"pm.globals.set(\"currency_id\",currency_id);\r",
									"\r",
									"pm.globals.set(\"title\", generateRandomString(10));\r",
									"\r",
									"{const categoryIds = [1, 2, 3];\r",
									"const randomIndex = Math.floor(Math.random() * categoryIds.length);\r",
									"const randomCategoryId = categoryIds[randomIndex];\r",
									"\r",
									"pm.globals.set(\"improvementCategoryId\", randomCategoryId);}\r",
									"\r",
									"const typeIds = [1, 2, 3, 5];\r",
									"const randomIndex = Math.floor(Math.random() * typeIds.length);\r",
									"const randomTypeId = typeIds[randomIndex];\r",
									"\r",
									"pm.globals.set(\"improvementTypeId\", randomTypeId);\r",
									"\r",
									"const stringLength = 10;\r",
									"let strings = [];\r",
									"\r",
									"{for (let i = 0; i < 100; i++) {\r",
									"  let randomString = \"\";\r",
									"  const characters = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
									"  for (let j = 0; j < stringLength; j++) {\r",
									"    randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"  }\r",
									"  strings.push(randomString);\r",
									"}\r",
									"\r",
									"pm.globals.set(\"descStrings\", strings);}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"form_id\": 8,\r\n\"subscriber_id\": 1,\r\n\"data\": [\r\n{\"consumer_id\": {{parent_location_id}},\r\n\"title\": \"{{title}}\",\r\n\"improvement_category_id\": {{improvementCategoryId}},\r\n\"improvement_type_id\": {{improvementTypeId}},\r\n\"start_date\": \"2023-02-01\",\r\n\"end_date\": \"2023-02-28\",\r\n\"currency_id\": 1,\r\n\"amount\": {{amount}},\r\n\"man_days\": {{man_days}},\r\n\"desc\": \"{{descStrings}}\",\r\n\"remarks\": \"{{remarks}}\"\r\n}\r\n]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/form_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CSR & Environment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//const improvement_category_id = [1, 2, 3];\r",
									"//const randomIndex = Math.floor(Math.random() * improvement_category_id.length);\r",
									"//const randomimprovement_category_id = improvement_category_id[randomIndex];\r",
									"\r",
									"function generateRandomString(length) {\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"remarks\", generateRandomString(10));\r",
									"\r",
									"pm.variables.set(\"amount\", Math.floor(Math.random() * 10000) + 1);\r",
									"\r",
									"pm.variables.set(\"man_days\", Math.floor(Math.random() * 10000) + 1);\r",
									"\r",
									"const currency_id  = Math.floor(Math.random() * 21)+1;\r",
									"pm.globals.set(\"currency_id\",currency_id);\r",
									"\r",
									"pm.environment.set(\"title\", generateRandomString(10));\r",
									"\r",
									"{const categoryIds = [1, 2, 3];\r",
									"const randomIndex = Math.floor(Math.random() * categoryIds.length);\r",
									"const randomCategoryId = categoryIds[randomIndex];\r",
									"\r",
									"pm.environment.set(\"improvementCategoryId\", randomCategoryId);}\r",
									"\r",
									"const typeIds = [1, 2, 3, 5];\r",
									"const randomIndex = Math.floor(Math.random() * typeIds.length);\r",
									"const randomTypeId = typeIds[randomIndex];\r",
									"\r",
									"pm.environment.set(\"improvementTypeId\", randomTypeId);\r",
									"\r",
									"const stringLength = 10;\r",
									"let strings = [];\r",
									"\r",
									"{for (let i = 0; i < 100; i++) {\r",
									"  let randomString = \"\";\r",
									"  const characters = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
									"  for (let j = 0; j < stringLength; j++) {\r",
									"    randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"  }\r",
									"  strings.push(randomString);\r",
									"}\r",
									"\r",
									"pm.environment.set(\"descStrings\", strings);}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"data\": [\r\n{\"id\" : 45,\r\n\"consumer_id\": 615,\r\n\"title\": \"{{title}}\",\r\n\"improvement_category_id\": {{improvementCategoryId}},\r\n\"improvement_type_id\": {{improvementTypeId}},\r\n\"start_date\": \"2023-02-01\",\r\n\"end_date\": \"2023-02-28\",\r\n\"currency_id\": {{currency_id}},\r\n\"amount\": {{amount}},\r\n\"man_days\": {{man_days}},\r\n\"desc\": \"{{descStrings}}\",\r\n\"remarks\": \"{{remarks}}\"\r\n}\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}form_submit?form_id=8&subscriber_id=1",
							"host": [
								"{{url}}form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "8"
								},
								{
									"key": "subscriber_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}